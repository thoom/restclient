#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.expand_path(File.dirname(File.dirname(__FILE__))) + '/lib')

require 'constants'
require 'config'
require 'output_builder'
require 'rest_up'

require 'optparse'
require 'json'
require 'yaml'

begin
  # set some default colors
  default_colors = { subtitle_color: :default, subtitle_bgcolor: :default, title_color: :default, title_bgcolor: :default }

  output_default = Thoom::OutputBuilder.new default_colors
  output_builder = output_default

  output_default.quit_with_title('Missing required options. Use "--help" OR "--help details" for more information', false) if ARGV.empty?

  colors                 = {}
  colors[:title_color]   = '003366'
  colors[:title_bgcolor] = :white

  colors[:subtitle_color]   = :white
  colors[:subtitle_bgcolor] = '003366'

  colors[:help_filename]       = :yellow
  colors[:help_sample_request] = :magenta
  colors[:help_sample_url]     = :blue

  colors[:request_method]    = :cyan
  colors[:request_path]      = '336699'
  colors[:request_port_http] = '336699'
  colors[:request_port_tls]  = '339966'
  colors[:request_endpoint]  = :yellow

  colors[:success] = :green
  colors[:warning] = :yellow
  colors[:info]    = :yellow
  colors[:error]   = :red

  config_file = '.restup.yml'

  begin
    config = Thoom::YamlConfig.new config_file, :default
  rescue Thoom::ConfigFileError
    config = Thoom::HashConfig.new
  end

  output_builder = Thoom::OutputBuilder.new colors

  new_colors = config.get(:colors, yolo: :cyan)

  output_builder.quit(Paint['Empty color: hash found in YAML configuration', colors[:error]]) if new_colors.nil? || new_colors.empty?
  colors.merge!(new_colors)

  verbose             = true
  filename            = nil
  output              = nil
  content_disposition = false
  response_only       = false
  response_code_only  = false
  success_only        = false

  headers = {}
  opts    = {}
  method  = 'GET'

  parser = OptionParser.new do |o|
    o.banner = 'Usage: restup [options] ENDPOINT'
    o.on('--concise', 'Disables verbose output') do
      verbose = false
    end

    o.on('--content-disposition', 'For responses with a filename in the Content Disposition, save the response using that filename') do
      content_disposition = true
    end

    o.on('--form', 'Converts JSON-formatted input and encode it as x-www-form-urlencoded') do
      headers['content-type'] = 'application/x-www-form-urlencoded'
    end

    o.on('--response-only', 'Only outputs the response body') do
      response_only = true
    end
    o.on('--response-code-only', 'Only outputs the response code') do
      response_code_only = true
    end

    o.on('--success-only', 'Only outputs whether or not the request was successful') do
      success_only = true
    end

    o.on(--cert CERTFILE', 'Imports cert for Client-Authentication endpoints') do |cert|
      opts[:cert] = cert
    end

    o.on('-e', '--env ENVIRONMENT', 'Sets YAML environment for the request') do |e|
      config.env = e.to_sym
      env_colors = config.get(:colors, {})
      colors.merge!(env_colors)
    end

    o.on('-h', '--header HEADER', 'Sets arbitrary header passed in format "HEADER: VALUE"') do |header|
      key, val = header.split(':')
      headers[key.strip] = val.strip
    end

    o.on('-j', '--json [c|a]', 'Sets the Content-Type and/or Accept Headers to use JSON mime types (i.e. -ja)') do |json|
      case json
      when 'c', 'content-type'
        headers['content-type'] = :json
      when 'a', 'accept'
        headers['accept'] = :json
      else
        headers['content-type'] = :json
        headers['accept']       = :json
      end
    end

    o.on('-m', '--method METHOD', 'Save output to file passed') do |method_name|
      method = m
    end

    o.on('-o', '--output FILE', 'Save output to file passed') do |file|
      output = file
    end

    o.on('-p', '--password PASSWORD', 'Password for Basic Authentication') do |password|
      opts[:pass] = password
    end

    o.on('-u', '--username USERNAME', 'Username for Basic Authentication') do |username|
      opts[:user] = username
    end

    o.on('-x', '--xml [c|a]', 'Sets the Content-Type and/or Accept Headers to use XML mime types (i.e. -xc)') do |xml|
      case xml
      when 'c', 'content-type'
        headers['content-type'] = :xml
      when 'a', 'accept'
        headers['accept'] = :xml
      else
        headers['content-type'] = :xml
        headers['accept']       = :xml
      end
    end

    o.on_tail('--version', 'Shows client version') do
      output_default.quit_with_title('', false)
    end

    o.on_tail('--help [details]', 'Shows this message') do |details|
      if details == 'details'
        output_builder.help(config_file, o)
      else
        output_builder.quit(o)
      end
    end
  end

  parser.parse! ARGV
  output_builder.quit(Paint['Missing required METHOD and/or ENDPOINT', colors[:error]]) if ARGV.length < 2

  config.set(:user, opts[:user]) if opts.key? :user
  config.set(:pass, opts[:pass]) if opts.key? :pass

  client = Thoom::RestUp.new config
  client.method = method
  client.endpoint = ARGV.pop
  client.cert = opts[:cert] if opts.key? :cert

  headers_default = config.get(:headers, {})
  headers_default.each { |key, val| client.headers[key] = val } if headers_default.respond_to? :each

  headers.each do |key, val|
    if %w(content-type accept).include? key
      val = config.get(:json, Thoom::Constants::MIME_JSON) if val == :json
      val = config.get(:xml, Thoom::Constants::MIME_XML) if val == :xml
    end
    client.headers[key] = val
  end

  if ARGF.filename != '-' || (!STDIN.tty? && !STDIN.closed?)
    data = ARGF.read

    if !client.headers.key?('content-type') || client.headers['content-type'].include?('json')
      data = YAML.load(data).to_json
    end

    client.data = data
  end

  request = client.request
  unless response_code_only || success_only || response_only
    output_builder.request(client, request, filename, verbose)
  end

  before = Time.now
  response = client.submit request
  output_builder.response_time = (Time.now - before).round(2)

  output_builder.quit(response) unless response.respond_to? :each_header

  if response_code_only
    puts response.code
  elsif success_only
    puts response.code.to_i < 400
  elsif response_only
    puts response.body
  else
    output_builder.response(response, verbose)
    output_builder.save_response(response, content_disposition, output)
    puts "\n"
  end
rescue Timeout::Error
  output_builder.quit Paint['Request timed out', colors[:error]]
rescue SystemExit
  puts "\n"
rescue Exception => e
  output_builder.quit "#{Paint[e.message.capitalize, colors[:error]]}\n\n"
end
